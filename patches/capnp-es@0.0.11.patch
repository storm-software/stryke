diff --git a/dist/index.d.mts b/dist/index.d.mts
index 3b7a73610da2d130513f7607ead02b5dc8942366..454dfa574d635133323a1dd8bb459d4344bcee7f 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -707,8 +707,9 @@ declare const utils_setUint8: typeof setUint8;
 declare const utils_testWhich: typeof testWhich;
 declare const utils_trackPointerAllocation: typeof trackPointerAllocation;
 declare const utils_validate: typeof validate;
+
 declare namespace utils {
-  export { utils_PointerAllocationResult as PointerAllocationResult, utils_add as add, utils_adopt as adopt, utils_checkDataBounds as checkDataBounds, utils_checkPointerBounds as checkPointerBounds, utils_copyFrom as copyFrom, utils_copyFromInterface as copyFromInterface, utils_copyFromList as copyFromList, utils_copyFromStruct as copyFromStruct, utils_disown as disown, utils_dump as dump, utils_erase as erase, utils_erasePointer as erasePointer, utils_followFar as followFar, utils_followFars as followFars, utils_getAs as getAs, utils_getBit as getBit, utils_getCapabilityId as getCapabilityId, utils_getContent as getContent, utils_getData as getData, utils_getDataSection as getDataSection, utils_getFarSegmentId as getFarSegmentId, utils_getFloat32 as getFloat32, utils_getFloat64 as getFloat64, utils_getInt16 as getInt16, utils_getInt32 as getInt32, utils_getInt64 as getInt64, utils_getInt8 as getInt8, utils_getInterfaceClientOrNull as getInterfaceClientOrNull, utils_getInterfaceClientOrNullAt as getInterfaceClientOrNullAt, utils_getInterfacePointer as getInterfacePointer, utils_getList as getList, utils_getListByteLength as getListByteLength, utils_getListElementByteLength as getListElementByteLength, utils_getListElementSize as getListElementSize, utils_getListLength as getListLength, utils_getOffsetWords as getOffsetWords, utils_getPointer as getPointer, utils_getPointerAs as getPointerAs, utils_getPointerSection as getPointerSection, utils_getPointerType as getPointerType, utils_getSize as getSize, utils_getStruct as getStruct, utils_getStructDataWords as getStructDataWords, utils_getStructPointerLength as getStructPointerLength, utils_getStructSize as getStructSize, utils_getTargetCompositeListSize as getTargetCompositeListSize, utils_getTargetCompositeListTag as getTargetCompositeListTag, utils_getTargetListElementSize as getTargetListElementSize, utils_getTargetListLength as getTargetListLength, utils_getTargetPointerType as getTargetPointerType, utils_getTargetStructSize as getTargetStructSize, utils_getText as getText, utils_getUint16 as getUint16, utils_getUint32 as getUint32, utils_getUint64 as getUint64, utils_getUint8 as getUint8, utils_initData as initData, utils_initList as initList, utils_initPointer as initPointer, utils_initStruct as initStruct, utils_initStructAt as initStructAt, utils_isDoubleFar as isDoubleFar, utils_isNull as isNull, utils_relocateTo as relocateTo, utils_resize as resize, utils_setBit as setBit, utils_setFarPointer as setFarPointer, utils_setFloat32 as setFloat32, utils_setFloat64 as setFloat64, utils_setInt16 as setInt16, utils_setInt32 as setInt32, utils_setInt64 as setInt64, utils_setInt8 as setInt8, utils_setInterfacePointer as setInterfacePointer, utils_setListPointer as setListPointer, utils_setStructPointer as setStructPointer, utils_setText as setText, utils_setUint16 as setUint16, utils_setUint32 as setUint32, utils_setUint64 as setUint64, utils_setUint8 as setUint8, utils_testWhich as testWhich, utils_trackPointerAllocation as trackPointerAllocation, utils_validate as validate };
+  export { PointerAllocationResult, add, adopt, checkDataBounds, checkPointerBounds, copyFrom, copyFromInterface, copyFromList, copyFromStruct, disown, dump, erase, erasePointer, followFar, followFars, getAs, getBit, getCapabilityId, getContent, getData, getDataSection, getFarSegmentId, getFloat32, getFloat64, getInt16, getInt32, getInt64, getInt8, getInterfaceClientOrNull, getInterfaceClientOrNullAt, getInterfacePointer, getList, getListByteLength, getListElementByteLength, getListElementSize, getListLength, getOffsetWords, getPointer, getPointerAs, getPointerSection, getPointerType, getSize, getStruct, getStructDataWords, getStructPointerLength, getStructSize, getTargetCompositeListSize, getTargetCompositeListTag, getTargetListElementSize, getTargetListLength, getTargetPointerType, getTargetStructSize, getText, getUint16, getUint32, getUint64, getUint8, initData, initList, initPointer, initStruct, initStructAt, isDoubleFar, isNull, relocateTo, resize, setBit, setFarPointer, setFloat32, setFloat64, setInt16, setInt32, setInt64, setInt8, setInterfacePointer, setListPointer, setStructPointer, setText, setUint16, setUint32, setUint64, setUint8, testWhich, trackPointerAllocation, validate };
 }
 
 declare const AnyPointerList: ListCtor<Pointer>;
diff --git a/dist/index.d.ts b/dist/index.d.ts
index d600d5c508f8693b7cd16f333b044dbce13e40bf..906a3ccdd3fdd617a92a729a148a259662eabdae 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -707,8 +707,9 @@ declare const utils_setUint8: typeof setUint8;
 declare const utils_testWhich: typeof testWhich;
 declare const utils_trackPointerAllocation: typeof trackPointerAllocation;
 declare const utils_validate: typeof validate;
+
 declare namespace utils {
-  export { utils_PointerAllocationResult as PointerAllocationResult, utils_add as add, utils_adopt as adopt, utils_checkDataBounds as checkDataBounds, utils_checkPointerBounds as checkPointerBounds, utils_copyFrom as copyFrom, utils_copyFromInterface as copyFromInterface, utils_copyFromList as copyFromList, utils_copyFromStruct as copyFromStruct, utils_disown as disown, utils_dump as dump, utils_erase as erase, utils_erasePointer as erasePointer, utils_followFar as followFar, utils_followFars as followFars, utils_getAs as getAs, utils_getBit as getBit, utils_getCapabilityId as getCapabilityId, utils_getContent as getContent, utils_getData as getData, utils_getDataSection as getDataSection, utils_getFarSegmentId as getFarSegmentId, utils_getFloat32 as getFloat32, utils_getFloat64 as getFloat64, utils_getInt16 as getInt16, utils_getInt32 as getInt32, utils_getInt64 as getInt64, utils_getInt8 as getInt8, utils_getInterfaceClientOrNull as getInterfaceClientOrNull, utils_getInterfaceClientOrNullAt as getInterfaceClientOrNullAt, utils_getInterfacePointer as getInterfacePointer, utils_getList as getList, utils_getListByteLength as getListByteLength, utils_getListElementByteLength as getListElementByteLength, utils_getListElementSize as getListElementSize, utils_getListLength as getListLength, utils_getOffsetWords as getOffsetWords, utils_getPointer as getPointer, utils_getPointerAs as getPointerAs, utils_getPointerSection as getPointerSection, utils_getPointerType as getPointerType, utils_getSize as getSize, utils_getStruct as getStruct, utils_getStructDataWords as getStructDataWords, utils_getStructPointerLength as getStructPointerLength, utils_getStructSize as getStructSize, utils_getTargetCompositeListSize as getTargetCompositeListSize, utils_getTargetCompositeListTag as getTargetCompositeListTag, utils_getTargetListElementSize as getTargetListElementSize, utils_getTargetListLength as getTargetListLength, utils_getTargetPointerType as getTargetPointerType, utils_getTargetStructSize as getTargetStructSize, utils_getText as getText, utils_getUint16 as getUint16, utils_getUint32 as getUint32, utils_getUint64 as getUint64, utils_getUint8 as getUint8, utils_initData as initData, utils_initList as initList, utils_initPointer as initPointer, utils_initStruct as initStruct, utils_initStructAt as initStructAt, utils_isDoubleFar as isDoubleFar, utils_isNull as isNull, utils_relocateTo as relocateTo, utils_resize as resize, utils_setBit as setBit, utils_setFarPointer as setFarPointer, utils_setFloat32 as setFloat32, utils_setFloat64 as setFloat64, utils_setInt16 as setInt16, utils_setInt32 as setInt32, utils_setInt64 as setInt64, utils_setInt8 as setInt8, utils_setInterfacePointer as setInterfacePointer, utils_setListPointer as setListPointer, utils_setStructPointer as setStructPointer, utils_setText as setText, utils_setUint16 as setUint16, utils_setUint32 as setUint32, utils_setUint64 as setUint64, utils_setUint8 as setUint8, utils_testWhich as testWhich, utils_trackPointerAllocation as trackPointerAllocation, utils_validate as validate };
+  export { PointerAllocationResult, add, adopt, checkDataBounds, checkPointerBounds, copyFrom, copyFromInterface, copyFromList, copyFromStruct, disown, dump, erase, erasePointer, followFar, followFars, getAs, getBit, getCapabilityId, getContent, getData, getDataSection, getFarSegmentId, getFloat32, getFloat64, getInt16, getInt32, getInt64, getInt8, getInterfaceClientOrNull, getInterfaceClientOrNullAt, getInterfacePointer, getList, getListByteLength, getListElementByteLength, getListElementSize, getListLength, getOffsetWords, getPointer, getPointerAs, getPointerSection, getPointerType, getSize, getStruct, getStructDataWords, getStructPointerLength, getStructSize, getTargetCompositeListSize, getTargetCompositeListTag, getTargetListElementSize, getTargetListLength, getTargetPointerType, getTargetStructSize, getText, getUint16, getUint32, getUint64, getUint8, initData, initList, initPointer, initStruct, initStructAt, isDoubleFar, isNull, relocateTo, resize, setBit, setFarPointer, setFloat32, setFloat64, setInt16, setInt32, setInt64, setInt8, setInterfacePointer, setListPointer, setStructPointer, setText, setUint16, setUint32, setUint64, setUint8, testWhich, trackPointerAllocation, validate };
 }
 
 declare const AnyPointerList: ListCtor<Pointer>;
diff --git a/dist/shared/capnp-es.CbTQkT9D.mjs b/dist/shared/capnp-es.CbTQkT9D.mjs
index 2affa204b705e4ed28a4fda16118b7f95badafa6..626fc608c243db802a100a56edfcc95bd9c428a6 100644
--- a/dist/shared/capnp-es.CbTQkT9D.mjs
+++ b/dist/shared/capnp-es.CbTQkT9D.mjs
@@ -115,7 +115,14 @@ const Primitives = {
     setter: "setVoid"
   }
 };
-const SOURCE_COMMENT = `// This file has been automatically generated by capnp-es.
+
+const SOURCE_COMMENT = `
+/* eslint-disable */
+// biome-ignore lint: disable
+
+// Generated by storm-capnpc
+// Note: Do not edit this file manually - it will be overwritten automatically
+
 `;
 const TS_FILE_ID = "e37ded525a68a7c9";
 
@@ -445,7 +452,7 @@ function generateServer(ctx, node) {
     ${methodSignatures}
   }`);
   const members = [];
-  members.push(`readonly target: ${serverTargetName};`);
+  members.push(`public override readonly target: ${serverTargetName};`);
   const codeServerMethods = [];
   let index = 0;
   for (const method of node.interface.methods) {
@@ -645,7 +652,7 @@ function generateStructNode(ctx, node) {
   }
   members.push(
     `
-      static readonly _capnp = {
+      public static override readonly _capnp = {
         displayName: "${displayNamePrefix}",
         id: "${nodeIdHex}",
         size: new $.ObjectSize(${dataByteLength}, ${pointerCount}),
@@ -658,7 +665,7 @@ function generateStructNode(ctx, node) {
     generateStructFieldMethods(ctx, members, node, field, index);
   }
   members.push(
-    `toString(): string { return "${fullClassName}_" + super.toString(); }`
+    `public override toString(): string { return "${fullClassName}_" + super.toString(); }`
   );
   if (hasUnnamedUnion) {
     members.push(`
@@ -1028,12 +1035,12 @@ function generateInterfaceNode(ctx, node) {
     ...nestedNodes.map((node2) => createNestedNodeProperty(node2)),
     `static readonly Client = ${fullClassName}$Client;
      static readonly Server = ${fullClassName}$Server;
-     static readonly _capnp = {
+     public static override readonly _capnp = {
         displayName: "${displayNamePrefix}",
         id: "${nodeIdHex}",
         size: new $.ObjectSize(0, 0),
       }
-    toString(): string { return "${fullClassName}_" + super.toString(); }`
+    public override toString(): string { return "${fullClassName}_" + super.toString(); }`
   );
   const docComment = extractJSDocs(lookupNodeSourceInfo(ctx, node));
   const classCode = `
@@ -1143,7 +1150,7 @@ function generateCapnpImport(ctx) {
     (n) => n.name === "importPath"
   );
   const importAnnotation = tsImportPathAnnotation && fileNode.annotations.find((a) => a.id === tsImportPathAnnotation.id);
-  const importPath = importAnnotation === undefined ? "capnp-es" : importAnnotation.value.text;
+  const importPath = importAnnotation === undefined ? "@stryke/capnp" : importAnnotation.value.text;
   ctx.codeParts.push(`import * as $ from '${importPath}';`);
 }
 function generateNestedImports(ctx) {
@@ -1151,9 +1158,9 @@ function generateNestedImports(ctx) {
     const { name } = imp;
     let importPath;
     if (name.startsWith("/capnp/")) {
-      importPath = `capnp-es/capnp/${name.slice(7).replace(/\.capnp$/, "")}`;
+      importPath = `@stryke/capnp/schemas/${name.slice(7).replace(/\.capnp$/, "")}`;
     } else {
-      importPath = name.replace(/\.capnp$/, ".js");
+      importPath = name.replace(/\.capnp$/, "");
       if (importPath[0] !== ".") {
         importPath = `./${importPath}`;
       }
@@ -1186,12 +1193,24 @@ async function compileAll(codeGenRequest, opts) {
   const req = new Message(codeGenRequest, false).getRoot(
     CodeGeneratorRequest
   );
+
   const ctx = new CodeGeneratorContext();
   ctx.files = req.requestedFiles.map((file) => loadRequestedFile(req, file));
+  if (ctx.files.length === 0) {
+    throw new Error(GEN_NO_FILES);
+  } 
+
   const files = new Map(
     ctx.files.map((file) => [file.tsPath, compileFile(file)])
   );
-  tsCompile(files, opts?.dts === true, opts?.js === true, opts?.tsconfig);
+  if (files.size === 0) {
+    throw new Error(GEN_NO_FILES);
+  } 
+
+  if (opts?.dts === true || opts?.js === true) {
+    tsCompile(files, opts?.dts === true, opts?.js === true, opts?.tsconfig);
+  }
+
   if (!opts?.ts) {
     for (const [fileName] of files) {
       if (fileName.endsWith(".ts") && !fileName.endsWith(".d.ts")) {
@@ -1199,11 +1218,13 @@ async function compileAll(codeGenRequest, opts) {
       }
     }
   }
+
   return {
     ctx,
     files
   };
 }
+
 function compileFile(ctx) {
   generateCapnpImport(ctx);
   generateNestedImports(ctx);
@@ -1226,6 +1247,7 @@ function compileFile(ctx) {
   );
   return SOURCE_COMMENT + ts.createPrinter().printFile(sourceFile);
 }
+
 function tsCompile(files, dts, js, tsconfig) {
   if (!dts && !js) {
     return;
@@ -1233,6 +1255,8 @@ function tsCompile(files, dts, js, tsconfig) {
   const compileOptions = {
     moduleResolution: ts.ModuleResolutionKind.Bundler,
     target: ts.ScriptTarget.ESNext,
+    strict: true,
+    ...tsconfig,
     noEmitOnError: false,
     noFallthroughCasesInSwitch: true,
     preserveConstEnums: true,
@@ -1242,8 +1266,6 @@ function tsCompile(files, dts, js, tsconfig) {
     removeComments: false,
     skipLibCheck: true,
     sourceMap: false,
-    strict: true,
-    ...tsconfig,
     emitDeclarationOnly: dts && !js,
     declaration: dts
   };
diff --git a/dist/shared/capnp-es.Dd0AvjKJ.d.mts b/dist/shared/capnp-es.Dd0AvjKJ.d.mts
index a7dc1ff38c0567b3b76acacb04c89a91d8804a58..e25b3af2edccbd5c0640cd82e6e3b196dc2a2842 100644
--- a/dist/shared/capnp-es.Dd0AvjKJ.d.mts
+++ b/dist/shared/capnp-es.Dd0AvjKJ.d.mts
@@ -2650,6 +2650,23 @@ declare class Segment implements DataView {
      * @param buffer The new buffer to use.
      */
     replaceBuffer(buffer: ArrayBuffer): void;
+
+    /**
+     * Read a float16 value from the specified offset.
+     *
+     * @param byteOffset The offset from the beginning of the buffer.
+     * @param littleEndian If true, read the value as little-endian, otherwise read it as big-endian.
+     * @returns The value read from the buffer.
+     */
+    getFloat16(byteOffset: number, littleEndian?: boolean | undefined): number;
+    /**
+     * Write an float16 value to the specified offset.
+     *
+     * @param byteOffset The offset from the beginning of the buffer.
+     * @param val The value to store.
+     */
+    setFloat16(byteOffset: number, val: number): void;
+
     setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;
     /** WARNING: This function is not yet implemented.  */
     setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;
@@ -2667,6 +2684,7 @@ declare class Segment implements DataView {
      * @param val The value to store.
      */
     setFloat64(byteOffset: number, val: number): void;
+
     /**
      * Write an int16 value to the specified offset.
      *
diff --git a/dist/shared/capnp-es.Dd0AvjKJ.d.ts b/dist/shared/capnp-es.Dd0AvjKJ.d.ts
index a7dc1ff38c0567b3b76acacb04c89a91d8804a58..774b4401522fc253720bd62c68c277371f40c99b 100644
--- a/dist/shared/capnp-es.Dd0AvjKJ.d.ts
+++ b/dist/shared/capnp-es.Dd0AvjKJ.d.ts
@@ -2650,6 +2650,23 @@ declare class Segment implements DataView {
      * @param buffer The new buffer to use.
      */
     replaceBuffer(buffer: ArrayBuffer): void;
+
+    /**
+     * Read a float16 value from the specified offset.
+     *
+     * @param byteOffset The offset from the beginning of the buffer.
+     * @param littleEndian If true, read the value as little-endian, otherwise read it as big-endian.
+     * @returns The value read from the buffer.
+     */
+    getFloat16(byteOffset: number, littleEndian?: boolean | undefined): number;
+    /**
+     * Write an float16 value to the specified offset.
+     *
+     * @param byteOffset The offset from the beginning of the buffer.
+     * @param val The value to store.
+     */
+    setFloat16(byteOffset: number, val: number): void;
+
     setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;
     /** WARNING: This function is not yet implemented.  */
     setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;
