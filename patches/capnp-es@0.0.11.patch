diff --git a/dist/shared/capnp-es.CbTQkT9D.mjs b/dist/shared/capnp-es.CbTQkT9D.mjs
index 2affa204b705e4ed28a4fda16118b7f95badafa6..6d6c538d85da69b23c97d6332df8485cb6618efc 100644
--- a/dist/shared/capnp-es.CbTQkT9D.mjs
+++ b/dist/shared/capnp-es.CbTQkT9D.mjs
@@ -115,7 +115,13 @@ const Primitives = {
     setter: "setVoid"
   }
 };
-const SOURCE_COMMENT = `// This file has been automatically generated by capnp-es.
+
+const SOURCE_COMMENT = `/* eslint-disable */
+// biome-ignore lint: disable
+
+// Generated by Storm Stack
+// Note: Do not edit this file manually - it will be overwritten automatically
+
 `;
 const TS_FILE_ID = "e37ded525a68a7c9";
 
@@ -445,7 +451,7 @@ function generateServer(ctx, node) {
     ${methodSignatures}
   }`);
   const members = [];
-  members.push(`readonly target: ${serverTargetName};`);
+  members.push(`public override readonly target: ${serverTargetName};`);
   const codeServerMethods = [];
   let index = 0;
   for (const method of node.interface.methods) {
@@ -645,7 +651,7 @@ function generateStructNode(ctx, node) {
   }
   members.push(
     `
-      static readonly _capnp = {
+      public static override readonly _capnp = {
         displayName: "${displayNamePrefix}",
         id: "${nodeIdHex}",
         size: new $.ObjectSize(${dataByteLength}, ${pointerCount}),
@@ -658,7 +664,7 @@ function generateStructNode(ctx, node) {
     generateStructFieldMethods(ctx, members, node, field, index);
   }
   members.push(
-    `toString(): string { return "${fullClassName}_" + super.toString(); }`
+    `public override toString(): string { return "${fullClassName}_" + super.toString(); }`
   );
   if (hasUnnamedUnion) {
     members.push(`
@@ -1028,12 +1034,12 @@ function generateInterfaceNode(ctx, node) {
     ...nestedNodes.map((node2) => createNestedNodeProperty(node2)),
     `static readonly Client = ${fullClassName}$Client;
      static readonly Server = ${fullClassName}$Server;
-     static readonly _capnp = {
+     public static override readonly _capnp = {
         displayName: "${displayNamePrefix}",
         id: "${nodeIdHex}",
         size: new $.ObjectSize(0, 0),
       }
-    toString(): string { return "${fullClassName}_" + super.toString(); }`
+    public override toString(): string { return "${fullClassName}_" + super.toString(); }`
   );
   const docComment = extractJSDocs(lookupNodeSourceInfo(ctx, node));
   const classCode = `
@@ -1233,6 +1239,7 @@ function tsCompile(files, dts, js, tsconfig) {
   const compileOptions = {
     moduleResolution: ts.ModuleResolutionKind.Bundler,
     target: ts.ScriptTarget.ESNext,
+    ...tsconfig,
     noEmitOnError: false,
     noFallthroughCasesInSwitch: true,
     preserveConstEnums: true,
@@ -1243,7 +1250,6 @@ function tsCompile(files, dts, js, tsconfig) {
     skipLibCheck: true,
     sourceMap: false,
     strict: true,
-    ...tsconfig,
     emitDeclarationOnly: dts && !js,
     declaration: dts
   };
