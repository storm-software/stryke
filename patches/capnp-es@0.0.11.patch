diff --git a/dist/shared/capnp-es.CbTQkT9D.mjs b/dist/shared/capnp-es.CbTQkT9D.mjs
index 2affa204b705e4ed28a4fda16118b7f95badafa6..5438ee9c201de6f9b52ad284bcfddc7bd21520c8 100644
--- a/dist/shared/capnp-es.CbTQkT9D.mjs
+++ b/dist/shared/capnp-es.CbTQkT9D.mjs
@@ -115,7 +115,14 @@ const Primitives = {
     setter: "setVoid"
   }
 };
-const SOURCE_COMMENT = `// This file has been automatically generated by capnp-es.
+
+const SOURCE_COMMENT = `
+/* eslint-disable */
+// biome-ignore lint: disable
+
+// Generated by storm-capnpc
+// Note: Do not edit this file manually - it will be overwritten automatically
+
 `;
 const TS_FILE_ID = "e37ded525a68a7c9";
 
@@ -445,7 +452,7 @@ function generateServer(ctx, node) {
     ${methodSignatures}
   }`);
   const members = [];
-  members.push(`readonly target: ${serverTargetName};`);
+  members.push(`public override readonly target: ${serverTargetName};`);
   const codeServerMethods = [];
   let index = 0;
   for (const method of node.interface.methods) {
@@ -645,7 +652,7 @@ function generateStructNode(ctx, node) {
   }
   members.push(
     `
-      static readonly _capnp = {
+      public static override readonly _capnp = {
         displayName: "${displayNamePrefix}",
         id: "${nodeIdHex}",
         size: new $.ObjectSize(${dataByteLength}, ${pointerCount}),
@@ -658,7 +665,7 @@ function generateStructNode(ctx, node) {
     generateStructFieldMethods(ctx, members, node, field, index);
   }
   members.push(
-    `toString(): string { return "${fullClassName}_" + super.toString(); }`
+    `public override toString(): string { return "${fullClassName}_" + super.toString(); }`
   );
   if (hasUnnamedUnion) {
     members.push(`
@@ -1028,12 +1035,12 @@ function generateInterfaceNode(ctx, node) {
     ...nestedNodes.map((node2) => createNestedNodeProperty(node2)),
     `static readonly Client = ${fullClassName}$Client;
      static readonly Server = ${fullClassName}$Server;
-     static readonly _capnp = {
+     public static override readonly _capnp = {
         displayName: "${displayNamePrefix}",
         id: "${nodeIdHex}",
         size: new $.ObjectSize(0, 0),
       }
-    toString(): string { return "${fullClassName}_" + super.toString(); }`
+    public override toString(): string { return "${fullClassName}_" + super.toString(); }`
   );
   const docComment = extractJSDocs(lookupNodeSourceInfo(ctx, node));
   const classCode = `
@@ -1143,7 +1150,7 @@ function generateCapnpImport(ctx) {
     (n) => n.name === "importPath"
   );
   const importAnnotation = tsImportPathAnnotation && fileNode.annotations.find((a) => a.id === tsImportPathAnnotation.id);
-  const importPath = importAnnotation === undefined ? "capnp-es" : importAnnotation.value.text;
+  const importPath = importAnnotation === undefined ? "@stryke/capnp" : importAnnotation.value.text;
   ctx.codeParts.push(`import * as $ from '${importPath}';`);
 }
 function generateNestedImports(ctx) {
@@ -1151,9 +1158,9 @@ function generateNestedImports(ctx) {
     const { name } = imp;
     let importPath;
     if (name.startsWith("/capnp/")) {
-      importPath = `capnp-es/capnp/${name.slice(7).replace(/\.capnp$/, "")}`;
+      importPath = `@stryke/capnp/schemas/${name.slice(7).replace(/\.capnp$/, "")}`;
     } else {
-      importPath = name.replace(/\.capnp$/, ".js");
+      importPath = name.replace(/\.capnp$/, "");
       if (importPath[0] !== ".") {
         importPath = `./${importPath}`;
       }
@@ -1186,12 +1193,35 @@ async function compileAll(codeGenRequest, opts) {
   const req = new Message(codeGenRequest, false).getRoot(
     CodeGeneratorRequest
   );
+
+  console.log(
+    `\nRunning capnpc for ${req.requestedFiles.length} capnp schema files \n`
+  );
+
   const ctx = new CodeGeneratorContext();
   ctx.files = req.requestedFiles.map((file) => loadRequestedFile(req, file));
+  if (ctx.files.length === 0) {
+    throw new Error(GEN_NO_FILES);
+  } 
+
+  console.log(
+    `\nCompiling ${ctx.files.length} files: ${ctx.files.map(f => f.tsPath).join(", ")}\n`
+  );
+
   const files = new Map(
     ctx.files.map((file) => [file.tsPath, compileFile(file)])
   );
-  tsCompile(files, opts?.dts === true, opts?.js === true, opts?.tsconfig);
+  if (files.size === 0) {
+    throw new Error(GEN_NO_FILES);
+  } 
+
+  if (opts?.dts === true || opts?.js === true) {
+    console.log(
+      `\nTypeScript Compiling ${files.size} files: ${[...files.keys()].join(", ")}\n`
+    );
+    tsCompile(files, opts?.dts === true, opts?.js === true, opts?.tsconfig);
+  }
+
   if (!opts?.ts) {
     for (const [fileName] of files) {
       if (fileName.endsWith(".ts") && !fileName.endsWith(".d.ts")) {
@@ -1199,11 +1229,13 @@ async function compileAll(codeGenRequest, opts) {
       }
     }
   }
+
   return {
     ctx,
     files
   };
 }
+
 function compileFile(ctx) {
   generateCapnpImport(ctx);
   generateNestedImports(ctx);
@@ -1226,6 +1258,7 @@ function compileFile(ctx) {
   );
   return SOURCE_COMMENT + ts.createPrinter().printFile(sourceFile);
 }
+
 function tsCompile(files, dts, js, tsconfig) {
   if (!dts && !js) {
     return;
@@ -1233,6 +1266,8 @@ function tsCompile(files, dts, js, tsconfig) {
   const compileOptions = {
     moduleResolution: ts.ModuleResolutionKind.Bundler,
     target: ts.ScriptTarget.ESNext,
+    strict: true,
+    ...tsconfig,
     noEmitOnError: false,
     noFallthroughCasesInSwitch: true,
     preserveConstEnums: true,
@@ -1242,8 +1277,6 @@ function tsCompile(files, dts, js, tsconfig) {
     removeComments: false,
     skipLibCheck: true,
     sourceMap: false,
-    strict: true,
-    ...tsconfig,
     emitDeclarationOnly: dts && !js,
     declaration: dts
   };
